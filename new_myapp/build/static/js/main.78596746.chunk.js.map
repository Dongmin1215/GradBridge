{"version":3,"sources":["constants/routes.js","components/Navigation.js","components/Landing.js","firebase/firebase.js","firebase/auth.js","components/SignUp.js","components/SignIn.js","components/PasswordForget.js","components/Home.js","components/Account.js","components/App.js","serviceWorker.js","index.js"],"names":["HOME","Navigation","react_default","a","createElement","Link","to","routes","LandingPage","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","auth","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","INITIAL_STATE","username","passwordOne","passwordTwo","error","byPropKey","propertyName","value","Object","defineProperty","SignUpForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","_this$state","state","history","then","authUser","setState","objectSpread","push","catch","preventDefault","_this2","_this$state2","isInvalid","onChange","target","type","placeholder","disabled","message","Component","withRouter","_ref","SignUp_SignUpForm","SignInPage","PasswordForgetPage","HomePage","AccountPage","App","BrowserRouter","components_Navigation","Route","exact","path","component","SignUpPage","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78596746.chunk.js","sourcesContent":["export const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const LANDING = '/';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const PASSWORD_FORGET = '/pw-forget';\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as routes from '../constants/routes';\n\nconst Navigation = () =>\n    <div>\n        <ul>\n            <li><Link to={routes.SIGN_IN}>Sign In</Link></li>\n            <li><Link to={routes.LANDING}>Landing</Link></li>\n            <li><Link to={routes.HOME}>Home</Link></li>\n            <li><Link to={routes.ACCOUNT}>Account</Link></li>\n        </ul>\n    </div>\n\nexport default Navigation;\n","import React from 'react';\n\nconst LandingPage = () =>\n    <div>\n        <h1>Landing Page</h1>\n    </div>\n\nexport default LandingPage;\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyCKPGFZa-CrSlNxqHrBjvHAe5bh4rJGIBc\",\n    authDomain: \"myapp-2ccee.firebaseapp.com\",\n    databaseURL: \"https://myapp-2ccee.firebaseio.com\",\n    projectId: \"myapp-2ccee\",\n    storageBucket: \"\",\n    messagingSenderId: \"1077242452126\"\n};\n\nif (!firebase.apps.length) {\n    firebase.initializeApp(config);\n}\n\nconst auth = firebase.auth();\n\nexport {\n    auth,\n};\n","import { auth } from './firebase';\n\n//Sign Up\nexport const doCreateUserWithEmailAndPassword = (email, password) =>\n    auth.createUserWithEmailAndPassword(email, password);\n\n//Sign In\nexport const doSignInWithEmailAndPassword = (email, password) =>\n    auth.signInWithEmailAndPassword(email, password);\n\n//Sign Out\nexport const doSignOut = () =>\n    auth.signOut();\n\n//Password Reset\nexport const doPasswordReset = (email) =>\n    auth.sendPasswordResetEmail(email);\n\n//Password Change\nexport const doPasswordUpdate = (password) =>\n    auth.currentUser.updatePassword(password);\n","import React, { Component } from 'react';\nimport {\n    Link,\n    withRouter,\n} from 'react-router-dom';\n\nimport { auth } from '../firebase';\nimport * as routes from '../constants/routes';\n\nconst SignUpPage = ({history}) =>\n    <div>\n        <h1>SignUp</h1>\n        <SignUpForm history={history} />\n    </div>\n\nconst INITIAL_STATE = {\n    username: '',\n    email: '',\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n};\n\nconst byPropKey = (propertyName, value) => () => ({\n    [propertyName]: value,\n});\n\n\nclass SignUpForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = (event) => {\n        const {\n            username,\n            email,\n            passwordOne,\n        } = this.state;\n\n        const {\n            history,\n        } = this.props;\n\n        auth.doCreateUserWithEmailAndPassword(email, passwordOne)\n            .then(authUser => {\n                this.setState({ ...INITIAL_STATE });\n                history.push(routes.HOME);\n            })\n            .catch(error => {\n                this.setState({ ...INITIAL_STATE });\n            });\n        event.preventDefault();\n    }\n\n    render() {\n        const {\n            username,\n            email,\n            passwordOne,\n            passwordTwo,\n            error,\n        } = this.state;\n\n        const isInvalid =\n            passwordOne !== passwordTwo ||\n            passwordOne === '' ||\n            email === '' ||\n            username === '';\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    value={username}\n                    onChange={event => this.setState(byPropKey('username', event.target.value))}\n                    type=\"text\"\n                    placeholder=\"Full Name\"\n                />\n                <input\n                    value={email}\n                    onChange={event => this.setState(byPropKey('email', event.target.value))}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    value={passwordOne}\n                    onChange={event => this.setState(byPropKey('passwordOne', event.target.value))}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                />\n                <input\n                    value={passwordTwo}\n                    onChange={event => this.setState(byPropKey('passwordTwo', event.target.value))}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Sign Up\n                </button>\n\n                { error && <p>{error.message}</p> }\n            </form>\n        );\n    }\n}\n\nconst SignUpLink = () =>\n    <p>\n        Don't have an account?\n        {' '}\n        <Link to={routes.SIGN_UP}>Sign Up</Link>\n    </p>\n\nexport default withRouter(SignUpPage);\n\nexport {\n    SignUpForm,\n    SignUpLink,\n};\n","import React from 'react';\n\nconst SignInPage = () =>\n    <div>\n        <h1>SignIn Page</h1>\n    </div>\n\nexport default SignInPage;\n","import React from 'react';\n\nconst PasswordForgetPage = () =>\n    <div>\n        <h1>PasswordForget Page</h1>\n    </div>\n\nexport default PasswordForgetPage;\n","import React from 'react';\n\nconst HomePage = () =>\n    <div>\n        <h1>Home Page</h1>\n    </div>\n\nexport default HomePage;\n","import React from 'react';\n\nconst AccountPage = () =>\n    <div>\n        <h1>Account Page</h1>\n    </div>\n\nexport default AccountPage;\n","import React from 'react';\nimport { BrowserRouter as Router,\n         Route,\n} from 'react-router-dom';\n\nimport Navigation from './Navigation';\nimport LandingPage from './Landing';\nimport SignUpPage from './SignUp';\nimport SignInPage from './SignIn';\nimport PasswordForgetPage from './PasswordForget';\nimport HomePage from './Home';\nimport AccountPage from './Account';\n\nimport * as routes from '../constants/routes';\n\nconst App = () =>\n    <Router>\n        <div>\n            <Navigation />\n            <hr />\n\n            <Route\n                exact path={routes.LANDING}\n                component={LandingPage}\n            />\n            <Route\n                exact path={routes.SIGN_UP}\n                component={SignUpPage}\n            />\n            <Route\n                exact path={routes.SIGN_IN}\n                component={SignInPage}\n            />\n            <Route\n                exact path={routes.PASSWORD_FORGET}\n                component={PasswordForgetPage}\n            />\n            <Route\n                exact path={routes.HOME}\n                component={HomePage}\n            />\n            <Route\n                exact path={routes.ACCOUNT}\n                component={AccountPage}\n            />\n        </div>\n    </Router>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}